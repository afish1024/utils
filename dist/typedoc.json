{
	"id": 0,
	"name": "@fish/utils",
	"variant": "project",
	"kind": 1,
	"flags": {},
	"children": [
		{
			"id": 1,
			"name": "get-integers",
			"variant": "declaration",
			"kind": 2,
			"flags": {},
			"children": [
				{
					"id": 2,
					"name": "getIntegers",
					"variant": "declaration",
					"kind": 64,
					"flags": {},
					"signatures": [
						{
							"id": 3,
							"name": "getIntegers",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "生成一个从给定数字到另一个数字的整数数组。"
									}
								],
								"blockTags": [
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport { getIntegers } from '@fish/utils'\n\ngetIntegers(1, 6) // [1, 2, 3, 4, 5, 6]\ngetIntegers(\"abc\", 6) // [] - 有一个参数不是数字\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 4,
									"name": "from",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "unknown"
									}
								},
								{
									"id": 5,
									"name": "to",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "unknown"
									}
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "number"
								}
							}
						}
					]
				}
			],
			"groups": [
				{
					"title": "Functions",
					"children": [
						2
					]
				}
			],
			"categories": [
				{
					"title": "Array",
					"children": [
						2
					]
				}
			]
		},
		{
			"id": 6,
			"name": "has-compact-case",
			"variant": "declaration",
			"kind": 2,
			"flags": {},
			"children": [
				{
					"id": 7,
					"name": "hasCompactCase",
					"variant": "declaration",
					"kind": 64,
					"flags": {},
					"signatures": [
						{
							"id": 8,
							"name": "hasCompactCase",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "检查传入的字符串参数是否包含空格，非字符串、带空格返回 false"
									}
								],
								"blockTags": [
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport { hasCompactCase } from '@fish/utils'\n\nhasCompactCase('thisiscompact') // true\nhasCompactCase('this is not compact') // false\nhasCompactCase(123) // false - input is not a string\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 9,
									"name": "input",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "unknown"
									}
								}
							],
							"type": {
								"type": "predicate",
								"name": "input",
								"asserts": false,
								"targetType": {
									"type": "intrinsic",
									"name": "string"
								}
							}
						}
					]
				}
			],
			"groups": [
				{
					"title": "Functions",
					"children": [
						7
					]
				}
			],
			"categories": [
				{
					"title": "String",
					"children": [
						7
					]
				}
			]
		},
		{
			"id": 10,
			"name": "has-lower-case",
			"variant": "declaration",
			"kind": 2,
			"flags": {},
			"children": [
				{
					"id": 11,
					"name": "hasLowerCase",
					"variant": "declaration",
					"kind": 64,
					"flags": {},
					"signatures": [
						{
							"id": 12,
							"name": "hasLowerCase",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "检查传入的字符串参数是否包含大写字母，包含大写字母、非字符串返回 false"
									}
								],
								"blockTags": [
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport { hasLowerCase } from '@fish/utils'\n\nhasLowerCase('this is lower') // true\nhasLowerCase('This is not LOWER') // false\nhasLowerCase(123) // false - input is not a string\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 13,
									"name": "input",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "unknown"
									}
								}
							],
							"type": {
								"type": "predicate",
								"name": "input",
								"asserts": false,
								"targetType": {
									"type": "intrinsic",
									"name": "string"
								}
							}
						}
					]
				}
			],
			"groups": [
				{
					"title": "Functions",
					"children": [
						11
					]
				}
			],
			"categories": [
				{
					"title": "String",
					"children": [
						11
					]
				}
			]
		},
		{
			"id": 14,
			"name": "has-running-in-browser",
			"variant": "declaration",
			"kind": 2,
			"flags": {},
			"children": [
				{
					"id": 15,
					"name": "hasRunningInBrowser",
					"variant": "declaration",
					"kind": 64,
					"flags": {},
					"signatures": [
						{
							"id": 16,
							"name": "hasRunningInBrowser",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "检查当前代码是否在浏览器中运行"
									}
								],
								"blockTags": [
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport { hasRunningInBrowser } from '@fish/utils'\n\nhasRunningInBrowser() // true\n```"
											}
										]
									}
								]
							},
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						}
					]
				}
			],
			"groups": [
				{
					"title": "Functions",
					"children": [
						15
					]
				}
			],
			"categories": [
				{
					"title": "Environment",
					"children": [
						15
					]
				}
			]
		},
		{
			"id": 17,
			"name": "has-unique",
			"variant": "declaration",
			"kind": 2,
			"flags": {},
			"children": [
				{
					"id": 18,
					"name": "hasUnique",
					"variant": "declaration",
					"kind": 64,
					"flags": {},
					"signatures": [
						{
							"id": 19,
							"name": "hasUnique",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "检查数组项是否唯一。对于非数组的任何值将返回 true。"
									}
								],
								"blockTags": [
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport { hasUnique } from '@fish/utils'\n\nhasUnique([1, 2, 3]) // true\nhasUnique([1, 1, 2]) // false\nhasUnique('not array') // true\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 20,
									"name": "input",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "unknown"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						}
					]
				}
			],
			"groups": [
				{
					"title": "Functions",
					"children": [
						18
					]
				}
			],
			"categories": [
				{
					"title": "Array",
					"children": [
						18
					]
				}
			]
		},
		{
			"id": 21,
			"name": "has-url-absolute",
			"variant": "declaration",
			"kind": 2,
			"flags": {},
			"children": [
				{
					"id": 22,
					"name": "hasUrlAbsolute",
					"variant": "declaration",
					"kind": 64,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "检查传入的 URL 字符串参数是否以协议开头来确定它是否是绝对路径，非字符串将返回 false"
							}
						],
						"blockTags": [
							{
								"tag": "@example",
								"content": [
									{
										"kind": "code",
										"text": "```ts\nimport { hasUrlAbsolute } from '@fish/utils'\n\nhasUrlAbsolute(\"http://example.com/page\") // true\nhasUrlAbsolute(\"/page\") // false\nhasUrlAbsolute(123) // false - input is not a string\n```"
									}
								]
							}
						]
					},
					"signatures": [
						{
							"id": 23,
							"name": "hasUrlAbsolute",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"parameters": [
								{
									"id": 24,
									"name": "url",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "unknown"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						}
					]
				}
			],
			"groups": [
				{
					"title": "Functions",
					"children": [
						22
					]
				}
			],
			"categories": [
				{
					"title": "String",
					"children": [
						22
					]
				}
			]
		},
		{
			"id": 25,
			"name": "index",
			"variant": "declaration",
			"kind": 2,
			"flags": {},
			"children": [
				{
					"id": 47,
					"name": "getIntegers",
					"variant": "reference",
					"kind": 4194304,
					"flags": {},
					"target": 2
				},
				{
					"id": 48,
					"name": "hasCompactCase",
					"variant": "reference",
					"kind": 4194304,
					"flags": {},
					"target": 7
				},
				{
					"id": 49,
					"name": "hasLowerCase",
					"variant": "reference",
					"kind": 4194304,
					"flags": {},
					"target": 11
				},
				{
					"id": 50,
					"name": "hasRunningInBrowser",
					"variant": "reference",
					"kind": 4194304,
					"flags": {},
					"target": 15
				},
				{
					"id": 51,
					"name": "hasUnique",
					"variant": "reference",
					"kind": 4194304,
					"flags": {},
					"target": 18
				},
				{
					"id": 52,
					"name": "hasUrlAbsolute",
					"variant": "reference",
					"kind": 4194304,
					"flags": {},
					"target": 22
				},
				{
					"id": 53,
					"name": "sleep",
					"variant": "reference",
					"kind": 4194304,
					"flags": {},
					"target": 27
				},
				{
					"id": 54,
					"name": "toCompactCase",
					"variant": "reference",
					"kind": 4194304,
					"flags": {},
					"target": 31
				},
				{
					"id": 55,
					"name": "toLetters",
					"variant": "reference",
					"kind": 4194304,
					"flags": {},
					"target": 35
				},
				{
					"id": 56,
					"name": "toNumber",
					"variant": "reference",
					"kind": 4194304,
					"flags": {},
					"target": 39
				},
				{
					"id": 57,
					"name": "toOrdinal",
					"variant": "reference",
					"kind": 4194304,
					"flags": {},
					"target": 43
				}
			],
			"groups": [
				{
					"title": "References",
					"children": [
						47,
						48,
						49,
						50,
						51,
						52,
						53,
						54,
						55,
						56,
						57
					]
				}
			]
		},
		{
			"id": 26,
			"name": "sleep",
			"variant": "declaration",
			"kind": 2,
			"flags": {},
			"children": [
				{
					"id": 27,
					"name": "sleep",
					"variant": "declaration",
					"kind": 64,
					"flags": {},
					"signatures": [
						{
							"id": 28,
							"name": "sleep",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "暂停当前函数"
									}
								],
								"blockTags": [
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport { sleep } from '@fish/utils'\n\nawait sleep(2000) // 暂停 2 秒\nawait sleep(\"abc\") // 传人非数字的参数，暂停 0 秒\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 29,
									"name": "milliseconds",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "node_modules/.pnpm/typescript@5.5.4/node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "void"
									}
								],
								"name": "Promise",
								"package": "typescript"
							}
						}
					]
				}
			],
			"groups": [
				{
					"title": "Functions",
					"children": [
						27
					]
				}
			],
			"categories": [
				{
					"title": "Misc",
					"children": [
						27
					]
				}
			]
		},
		{
			"id": 30,
			"name": "to-compact-case",
			"variant": "declaration",
			"kind": 2,
			"flags": {},
			"children": [
				{
					"id": 31,
					"name": "toCompactCase",
					"variant": "declaration",
					"kind": 64,
					"flags": {},
					"signatures": [
						{
							"id": 32,
							"name": "toCompactCase",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "从传入字符串参数中删除所有空白字符。"
									}
								],
								"blockTags": [
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport { toCompactCase } from '@fish/utils'\n\ntoCompactCase('this is text') // thisistext\ntoCompactCase('someTEXT') // someTEXT\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 33,
									"name": "input",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "unknown"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					]
				}
			],
			"groups": [
				{
					"title": "Functions",
					"children": [
						31
					]
				}
			],
			"categories": [
				{
					"title": "String",
					"children": [
						31
					]
				}
			]
		},
		{
			"id": 34,
			"name": "to-letters",
			"variant": "declaration",
			"kind": 2,
			"flags": {},
			"children": [
				{
					"id": 35,
					"name": "toLetters",
					"variant": "declaration",
					"kind": 64,
					"flags": {},
					"signatures": [
						{
							"id": 36,
							"name": "toLetters",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "从传入的字符串参数中删除所有非字母字符"
									}
								],
								"blockTags": [
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport { toLetters } from '@fish/utils'\n\ntoLetters('this is text') // thisistext\ntoLetters('123-Text!!!') // Text\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 37,
									"name": "input",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "unknown"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					]
				}
			],
			"groups": [
				{
					"title": "Functions",
					"children": [
						35
					]
				}
			],
			"categories": [
				{
					"title": "String",
					"children": [
						35
					]
				}
			]
		},
		{
			"id": 38,
			"name": "to-number",
			"variant": "declaration",
			"kind": 2,
			"flags": {},
			"children": [
				{
					"id": 39,
					"name": "toNumber",
					"variant": "declaration",
					"kind": 64,
					"flags": {},
					"signatures": [
						{
							"id": 40,
							"name": "toNumber",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "将传入的参数作为数字返回，不能转换成数字则返回 0"
									}
								],
								"blockTags": [
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport { toNumber } from '@fish/utils'\n\ntoNumber('this is text') // 0\ntoNumber('3') // 3\ntoNumber(0.4) // 0.4\ntoNumber(new Set([])) // 0\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 41,
									"name": "input",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "unknown"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					]
				}
			],
			"groups": [
				{
					"title": "Functions",
					"children": [
						39
					]
				}
			],
			"categories": [
				{
					"title": "Number",
					"children": [
						39
					]
				}
			]
		},
		{
			"id": 42,
			"name": "to-ordinal",
			"variant": "declaration",
			"kind": 2,
			"flags": {},
			"children": [
				{
					"id": 43,
					"name": "toOrdinal",
					"variant": "declaration",
					"kind": 64,
					"flags": {},
					"signatures": [
						{
							"id": 44,
							"name": "toOrdinal",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "如果可能，将数字转换为其序数字符串形式，否则返回第 0 个。\n- 1 -> 1st\n- 4.2 -> 4.2th\n- notANumber -> 0th"
									}
								],
								"blockTags": [
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport { toOrdinal } from '@fish/utils'\n\ntoOrdinal('this is text') // 0th\ntoOrdinal('3') // 3rd\ntoOrdinal('11') // 11th\ntoOrdinal(3.14) // 3.14th\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 45,
									"name": "input",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "unknown"
									},
									"defaultValue": "0"
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					]
				}
			],
			"groups": [
				{
					"title": "Functions",
					"children": [
						43
					]
				}
			],
			"categories": [
				{
					"title": "Number",
					"children": [
						43
					]
				}
			]
		},
		{
			"id": 46,
			"name": "vite-env",
			"variant": "declaration",
			"kind": 2,
			"flags": {}
		}
	],
	"groups": [
		{
			"title": "Modules",
			"children": [
				1,
				6,
				10,
				14,
				17,
				21,
				25,
				26,
				30,
				34,
				38,
				42,
				46
			]
		}
	],
	"packageName": "@fish/utils",
	"symbolIdMap": {
		"1": {
			"sourceFileName": "src/get-integers.ts",
			"qualifiedName": ""
		},
		"2": {
			"sourceFileName": "src/get-integers.ts",
			"qualifiedName": "getIntegers"
		},
		"3": {
			"sourceFileName": "src/get-integers.ts",
			"qualifiedName": "getIntegers"
		},
		"4": {
			"sourceFileName": "src/get-integers.ts",
			"qualifiedName": "from"
		},
		"5": {
			"sourceFileName": "src/get-integers.ts",
			"qualifiedName": "to"
		},
		"6": {
			"sourceFileName": "src/has-compact-case.ts",
			"qualifiedName": ""
		},
		"7": {
			"sourceFileName": "src/has-compact-case.ts",
			"qualifiedName": "hasCompactCase"
		},
		"8": {
			"sourceFileName": "src/has-compact-case.ts",
			"qualifiedName": "hasCompactCase"
		},
		"9": {
			"sourceFileName": "src/has-compact-case.ts",
			"qualifiedName": "input"
		},
		"10": {
			"sourceFileName": "src/has-lower-case.ts",
			"qualifiedName": ""
		},
		"11": {
			"sourceFileName": "src/has-lower-case.ts",
			"qualifiedName": "hasLowerCase"
		},
		"12": {
			"sourceFileName": "src/has-lower-case.ts",
			"qualifiedName": "hasLowerCase"
		},
		"13": {
			"sourceFileName": "src/has-lower-case.ts",
			"qualifiedName": "input"
		},
		"14": {
			"sourceFileName": "src/has-running-in-browser.ts",
			"qualifiedName": ""
		},
		"15": {
			"sourceFileName": "src/has-running-in-browser.ts",
			"qualifiedName": "hasRunningInBrowser"
		},
		"16": {
			"sourceFileName": "src/has-running-in-browser.ts",
			"qualifiedName": "hasRunningInBrowser"
		},
		"17": {
			"sourceFileName": "src/has-unique.ts",
			"qualifiedName": ""
		},
		"18": {
			"sourceFileName": "src/has-unique.ts",
			"qualifiedName": "hasUnique"
		},
		"19": {
			"sourceFileName": "src/has-unique.ts",
			"qualifiedName": "hasUnique"
		},
		"20": {
			"sourceFileName": "src/has-unique.ts",
			"qualifiedName": "input"
		},
		"21": {
			"sourceFileName": "src/has-url-absolute.ts",
			"qualifiedName": ""
		},
		"22": {
			"sourceFileName": "src/has-url-absolute.ts",
			"qualifiedName": "hasUrlAbsolute"
		},
		"23": {
			"sourceFileName": "src/has-url-absolute.ts",
			"qualifiedName": "hasUrlAbsolute"
		},
		"24": {
			"sourceFileName": "src/has-url-absolute.ts",
			"qualifiedName": "url"
		},
		"25": {
			"sourceFileName": "src/index.ts",
			"qualifiedName": ""
		},
		"26": {
			"sourceFileName": "src/sleep.ts",
			"qualifiedName": ""
		},
		"27": {
			"sourceFileName": "src/sleep.ts",
			"qualifiedName": "sleep"
		},
		"28": {
			"sourceFileName": "src/sleep.ts",
			"qualifiedName": "sleep"
		},
		"29": {
			"sourceFileName": "src/sleep.ts",
			"qualifiedName": "milliseconds"
		},
		"30": {
			"sourceFileName": "src/to-compact-case.ts",
			"qualifiedName": ""
		},
		"31": {
			"sourceFileName": "src/to-compact-case.ts",
			"qualifiedName": "toCompactCase"
		},
		"32": {
			"sourceFileName": "src/to-compact-case.ts",
			"qualifiedName": "toCompactCase"
		},
		"33": {
			"sourceFileName": "src/to-compact-case.ts",
			"qualifiedName": "input"
		},
		"34": {
			"sourceFileName": "src/to-letters.ts",
			"qualifiedName": ""
		},
		"35": {
			"sourceFileName": "src/to-letters.ts",
			"qualifiedName": "toLetters"
		},
		"36": {
			"sourceFileName": "src/to-letters.ts",
			"qualifiedName": "toLetters"
		},
		"37": {
			"sourceFileName": "src/to-letters.ts",
			"qualifiedName": "input"
		},
		"38": {
			"sourceFileName": "src/to-number.ts",
			"qualifiedName": ""
		},
		"39": {
			"sourceFileName": "src/to-number.ts",
			"qualifiedName": "toNumber"
		},
		"40": {
			"sourceFileName": "src/to-number.ts",
			"qualifiedName": "toNumber"
		},
		"41": {
			"sourceFileName": "src/to-number.ts",
			"qualifiedName": "input"
		},
		"42": {
			"sourceFileName": "src/to-ordinal.ts",
			"qualifiedName": ""
		},
		"43": {
			"sourceFileName": "src/to-ordinal.ts",
			"qualifiedName": "toOrdinal"
		},
		"44": {
			"sourceFileName": "src/to-ordinal.ts",
			"qualifiedName": "toOrdinal"
		},
		"45": {
			"sourceFileName": "src/to-ordinal.ts",
			"qualifiedName": "input"
		},
		"47": {
			"sourceFileName": "src/index.ts",
			"qualifiedName": "getIntegers"
		},
		"48": {
			"sourceFileName": "src/index.ts",
			"qualifiedName": "hasCompactCase"
		},
		"49": {
			"sourceFileName": "src/index.ts",
			"qualifiedName": "hasLowerCase"
		},
		"50": {
			"sourceFileName": "src/index.ts",
			"qualifiedName": "hasRunningInBrowser"
		},
		"51": {
			"sourceFileName": "src/index.ts",
			"qualifiedName": "hasUnique"
		},
		"52": {
			"sourceFileName": "src/index.ts",
			"qualifiedName": "hasUrlAbsolute"
		},
		"53": {
			"sourceFileName": "src/index.ts",
			"qualifiedName": "sleep"
		},
		"54": {
			"sourceFileName": "src/index.ts",
			"qualifiedName": "toCompactCase"
		},
		"55": {
			"sourceFileName": "src/index.ts",
			"qualifiedName": "toLetters"
		},
		"56": {
			"sourceFileName": "src/index.ts",
			"qualifiedName": "toNumber"
		},
		"57": {
			"sourceFileName": "src/index.ts",
			"qualifiedName": "toOrdinal"
		}
	},
	"files": {
		"entries": {
			"1": "src/get-integers.ts",
			"2": "src/has-compact-case.ts",
			"3": "src/has-lower-case.ts",
			"4": "src/has-running-in-browser.ts",
			"5": "src/has-unique.ts",
			"6": "src/has-url-absolute.ts",
			"7": "src/index.ts",
			"8": "src/sleep.ts",
			"9": "src/to-compact-case.ts",
			"10": "src/to-letters.ts",
			"11": "src/to-number.ts",
			"12": "src/to-ordinal.ts"
		},
		"reflections": {
			"1": 1,
			"2": 6,
			"3": 10,
			"4": 14,
			"5": 17,
			"6": 21,
			"7": 25,
			"8": 26,
			"9": 30,
			"10": 34,
			"11": 38,
			"12": 42
		}
	}
}
